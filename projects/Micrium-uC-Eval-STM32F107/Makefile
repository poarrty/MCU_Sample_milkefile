##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.15.2] date: [Thu Jan 27 12:47:15 CST 2022] 
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# user defines
######################################
CI_BUILD_NUM=0
COMMIT_ID=0#$(shell git rev-parse --short=8 HEAD)
BUILD_TIME=$(shell date +%Y%m%d%H%M%S)
CURRENT_BRANCH=dev#$(shell git rev-parse --abbrev-ref HEAD)
SOFTWARE_VERSION=0.0.1
MODEL_NAME=STM32F107

######################################
# target
######################################
TARGET = Micrium-uC-Eval-STM32F107


######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Og


#######################################
# paths
#######################################
# Build path
PROJECT_TOP_DIR = $(shell pwd)
TOPFOLDER = $(PROJECT_TOP_DIR)/../..
EXTENSIONS_DIR = $(PROJECT_TOP_DIR)/hal/core
BUILD_DIR = $(PROJECT_TOP_DIR)/build
UTILITIES_DIR = $(TOPFOLDER)/utilities
MIDDLEWARE_DIR = $(TOPFOLDER)/middlewares
DRIVERS_DIR = $(TOPFOLDER)/drivers/stm32_fw_f1


######################################
# code format
######################################
# FORMAT_RESULT:=$(shell ./utilities/astyle-format.sh)
FORMAT_INCLUDE = \
$(PROJECT_TOP_DIR)/app \
$(PROJECT_TOP_DIR)/common \
$(PROJECT_TOP_DIR)/fal \
$(PROJECT_TOP_DIR)/hal \
$(PROJECT_TOP_DIR)/middlewares \
$(PROJECT_TOP_DIR)/pal \
$(PROJECT_TOP_DIR)/utilities

FORMAT_RESULT:=$(shell $(UTILITIES_DIR)/tools/clang-format-all $(FORMAT_INCLUDE))

######################################
# source
######################################
# C sources
C_SOURCES =  \
$(EXTENSIONS_DIR)/Src/main.c \
$(EXTENSIONS_DIR)/Src/freertos.c \
$(EXTENSIONS_DIR)/Src/stm32f1xx_it.c \
$(EXTENSIONS_DIR)/Src/stm32f1xx_hal_msp.c \
$(EXTENSIONS_DIR)/Src/stm32f1xx_hal_timebase_tim.c \
$(EXTENSIONS_DIR)/Src/gpio.c \
$(EXTENSIONS_DIR)/Src/rtc.c \
$(EXTENSIONS_DIR)/Src/usart.c \
$(EXTENSIONS_DIR)/Src/iwdg.c \
$(EXTENSIONS_DIR)/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_gpio_ex.c \
$(EXTENSIONS_DIR)/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c \
$(EXTENSIONS_DIR)/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c \
$(EXTENSIONS_DIR)/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc_ex.c \
$(EXTENSIONS_DIR)/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_gpio.c \
$(EXTENSIONS_DIR)/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_dma.c \
$(EXTENSIONS_DIR)/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_cortex.c \
$(EXTENSIONS_DIR)/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c \
$(EXTENSIONS_DIR)/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash.c \
$(EXTENSIONS_DIR)/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash_ex.c \
$(EXTENSIONS_DIR)/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_exti.c \
$(EXTENSIONS_DIR)/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_tim.c \
$(EXTENSIONS_DIR)/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_tim_ex.c \
$(EXTENSIONS_DIR)/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rtc.c \
$(EXTENSIONS_DIR)/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rtc_ex.c \
$(EXTENSIONS_DIR)/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c \
$(EXTENSIONS_DIR)/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_iwdg.c \
$(EXTENSIONS_DIR)/Src/system_stm32f1xx.c \
$(EXTENSIONS_DIR)/Middlewares/Third_Party/FreeRTOS/Source/croutine.c \
$(EXTENSIONS_DIR)/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c \
$(EXTENSIONS_DIR)/Middlewares/Third_Party/FreeRTOS/Source/list.c \
$(EXTENSIONS_DIR)/Middlewares/Third_Party/FreeRTOS/Source/queue.c \
$(EXTENSIONS_DIR)/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c \
$(EXTENSIONS_DIR)/Middlewares/Third_Party/FreeRTOS/Source/tasks.c \
$(EXTENSIONS_DIR)/Middlewares/Third_Party/FreeRTOS/Source/timers.c \
$(EXTENSIONS_DIR)/Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.c \
$(EXTENSIONS_DIR)/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c \
$(EXTENSIONS_DIR)/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/port.c \
$(UTILITIES_DIR)/check/crc16.c \
$(UTILITIES_DIR)/check/md5.c \
$(UTILITIES_DIR)/check/easy_sha512.c \
$(UTILITIES_DIR)/MultiButton/multi_button.c \
$(UTILITIES_DIR)/letter-shell/src/shell.c \
$(UTILITIES_DIR)/letter-shell/src/shell_cmd_list.c \
$(UTILITIES_DIR)/letter-shell/src/shell_companion.c \
$(UTILITIES_DIR)/letter-shell/src/shell_ext.c \
$(UTILITIES_DIR)/FlashDB/src/fdb_kvdb.c \
$(UTILITIES_DIR)/FlashDB/src/fdb_tsdb.c \
$(UTILITIES_DIR)/FlashDB/src/fdb_utils.c \
$(UTILITIES_DIR)/FlashDB/src/fdb.c \
$(UTILITIES_DIR)/RTT_FAL/src/rtt_fal_flash.c \
$(UTILITIES_DIR)/RTT_FAL/src/rtt_fal_partition.c \
$(UTILITIES_DIR)/RTT_FAL/src/rtt_fal.c \
$(UTILITIES_DIR)/cm_backtrace/cm_backtrace.c \
$(UTILITIES_DIR)/cm_backtrace/fault_test.c \
$(UTILITIES_DIR)/cjson/cJSON.c \
$(UTILITIES_DIR)/easylogger/src/elog_utils.c \
$(UTILITIES_DIR)/easylogger/src/elog_async.c \
$(UTILITIES_DIR)/easylogger/src/elog.c \
$(UTILITIES_DIR)/easylogger/src/elog_buf.c \
$(UTILITIES_DIR)/segger-rtt/RTT/SEGGER_RTT.c \
$(UTILITIES_DIR)/segger-rtt/RTT/SEGGER_RTT_printf.c \
$(UTILITIES_DIR)/time/cputime/cputime.c \
$(wildcard $(UTILITIES_DIR)/common_config/system/*.c) 

C_SOURCES += $(wildcard $(PROJECT_TOP_DIR)/utilities/cm_backtrace/*.c)
C_SOURCES += $(wildcard $(PROJECT_TOP_DIR)/utilities/easylogger/*.c)
C_SOURCES += $(wildcard $(PROJECT_TOP_DIR)/utilities/rtt_fal/porting/*.c)
C_SOURCES += $(wildcard $(PROJECT_TOP_DIR)/utilities/letter_shell/porting/*.c)
C_SOURCES += $(wildcard $(PROJECT_TOP_DIR)/middlewares/*.c)
C_SOURCES += $(wildcard $(PROJECT_TOP_DIR)/app/*.c)
C_SOURCES += $(wildcard $(PROJECT_TOP_DIR)/common/*.c)
C_SOURCES += $(wildcard $(PROJECT_TOP_DIR)/fal/*.c)
C_SOURCES += $(wildcard $(PROJECT_TOP_DIR)/hal/*.c)
C_SOURCES += $(wildcard $(PROJECT_TOP_DIR)/hal/bsp/*.c)
C_SOURCES += $(wildcard $(PROJECT_TOP_DIR)/hal/driver/*.c)
C_SOURCES += $(wildcard $(PROJECT_TOP_DIR)/pal/*.c)

C_SOURCES := $(filter-out $(EXTENSIONS_DIR)/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c, $(C_SOURCES))
C_SOURCES := $(filter-out $(EXTENSIONS_DIR)/Middlewares/Third_Party/FreeRTOS/Source/tasks.c, $(C_SOURCES))

# ASM sources
ASM_SOURCES =  \
$(EXTENSIONS_DIR)/startup_stm32f107xc.s \
$(UTILITIES_DIR)/cm_backtrace/fault_handler/gcc/cmb_fault.s
# CXX sources
CXX_SOURCES += $(wildcard $(PROJECT_TOP_DIR)/fal/cpp/*.cpp)

#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CXX= $(GCC_PATH)/$(PREFIX)g++
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
AR = $(GCC_PATH)/$(PREFIX)ar
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CXX= $(PREFIX)g++
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
AR = $(PREFIX)ar
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m3

# fpu
# NONE for Cortex-M0/M0+/M3

# float-abi


# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =  \
-DUSE_HAL_DRIVER \
-DSTM32F107xC 

# CXX defines
CXX_DEFS = \
-DUSE_HAL_DRIVER \
-DSTM32F107xC  

# AS includes
AS_INCLUDES =  \
-I$(EXTENSIONS_DIR)/Inc

# C includes
C_INCLUDES =  \
-I$(EXTENSIONS_DIR)/Inc \
-I$(EXTENSIONS_DIR)/Drivers/STM32F1xx_HAL_Driver/Inc \
-I$(EXTENSIONS_DIR)/Drivers/STM32F1xx_HAL_Driver/Inc/Legacy \
-I$(EXTENSIONS_DIR)/Middlewares/Third_Party/FreeRTOS/Source/include \
-I$(EXTENSIONS_DIR)/Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2 \
-I$(EXTENSIONS_DIR)/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3 \
-I$(EXTENSIONS_DIR)/Drivers/CMSIS/Device/ST/STM32F1xx/Include \
-I$(EXTENSIONS_DIR)/Drivers/CMSIS/Include \
-I$(UTILITIES_DIR)/check \
-I$(UTILITIES_DIR)/cm_backtrace \
-I$(UTILITIES_DIR)/cm_backtrace/Languages/en-US \
-I$(UTILITIES_DIR)/cm_backtrace/Languages/zh-CN \
-I$(UTILITIES_DIR)/MultiButton \
-I$(UTILITIES_DIR)/letter-shell/src \
-I$(UTILITIES_DIR)/FlashDB/inc \
-I$(UTILITIES_DIR)/RTT_FAL/inc \
-I$(UTILITIES_DIR)/cjson \
-I$(UTILITIES_DIR)/easylogger/plugins/file \
-I$(UTILITIES_DIR)/easylogger/plugins/flash \
-I$(UTILITIES_DIR)/easylogger/inc \
-I$(UTILITIES_DIR)/segger-rtt/RTT \
-I$(UTILITIES_DIR)/time/cputime \
-I$(UTILITIES_DIR)/common_config/system

C_INCLUDES += $(addprefix -I, sort -u $(dir $(shell find $(PROJECT_TOP_DIR) -type f -name "*.h")))


# CXX includes
CXX_INCLUDES = $(C_INCLUDES)

# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -Wextra -Werror -fdata-sections -ffunction-sections

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections# -w -Wall -Wextra -Werror

CXXFLAGS = $(MCU) $(CXX_DEFS) $(CXX_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections#-w -Wall -Wextra -Werror

ifeq ($(DEBUG), 1)
CFLAGS += -g -ggdb3 #-g -gdwarf-2
CXXFLAGS += -g -ggdb3
endif


# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"
CXXFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"

#######################################
# CFLAGS add some define var
#######################################
CFLAGS += -DCOMMIT_ID=\"$(COMMIT_ID)\" -DBUILD_TIME=\"$(BUILD_TIME)\" -DCURRENT_BRANCH=\"$(CURRENT_BRANCH)\" -DMODEL_NAME=\"$(MODEL_NAME)\"
CFLAGS += -DSOFTWARE_VERSION=\"$(SOFTWARE_VERSION).$(CI_BUILD_NUM)\"
CFLAGS += -DTARGET=\"$(TARGET)\"


#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = $(EXTENSIONS_DIR)/STM32F107VCTx_FLASH.ld

# libraries
LIBS = -lc -lm -lstdc++ -lc_nano -lnosys  #-limagequality -lfundamental -lopenblas -lbtplatform -lrt -lpthread -ldl -lgcc_s
LIBDIR = 
LDFLAGS = $(MCU) -std=gnu99 -specs=nano.specs -specs=nosys.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections #-specs=nosys.specs 


# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin


#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))
# list of CXX program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(CXX_SOURCES:.cpp=.o)))
vpath %.cpp $(sort $(dir $(CXX_SOURCES)))

ifneq ($(V),1)
Q       := @
NULL    := 2>/dev/null
endif

$(BUILD_DIR)/$(LIB_TARGET).a: $(LIB_OBJECTS)
	$(AR) cr $@ $<
	ranlib $@

$(BUILD_DIR)/%.o: %.cpp Makefile | $(BUILD_DIR) 
	@printf "  CXX      $(*).cpp\n"
	$(Q) $(CXX) -c $(CXXFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.cpp=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	@printf "  CC      $(*).c\n"
	$(Q) $(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	@printf "  AS      $(*).s\n"
	$(Q) $(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	@printf "  LD      $(TARGET).elf\n"
	$(Q) $(CC) $(OBJECTS) $(LDFLAGS) -o $@
	@printf "  SZ      $(TARGET).elf\n"
	$(Q) $(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@	
	
$(BUILD_DIR):
	mkdir $@		

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)
  
#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

OPENOCD := openocd -f interface/jlink.cfg \
        -c 'transport select swd' \
        -f target/stm32f1x.cfg

# download your program
flash: all
	$(OPENOCD) -c init \
		-c 'reset halt' \
		-c 'flash write_image erase $(BUILD_DIR)/$(TARGET).elf' \
		-c 'reset run' \
		-c exit

download: all
	rm -rf flash.jlink
	touch flash.jlink
	echo "r" > flash.jlink
	echo "loadfile $(BUILD_DIR)/$(TARGET).bin" >> flash.jlink
	echo "r" >> flash.jlink
	echo "exit" >> flash.jlink
	JLinkExe -device STM32F107VC  -si SWD -speed 4000 -CommanderScript ./flash.jlink

#images:all
#	rm -rf $(BUILD_DIR)/*.o
#	rm -rf $(BUILD_DIR)/*.d
#	rm -rf $(BUILD_DIR)/*.lst
#	rm -rf $(BUILD_DIR)/*.map	
#	rm -rf $(BUILD_DIR)/ota*
#	cp $(BUILD_DIR)/$(TARGET).bin $(BUILD_DIR)/${TARGET}_${SOFTWARE_VERSION}.${CI_BUILD_NUM}_${CURRENT_BRANCH}_${COMMIT_ID}.bin
#	rm -rf $(BUILD_DIR)/$(TARGET).elf
#	rm -rf $(BUILD_DIR)/$(TARGET).hex
#	rm -rf $(BUILD_DIR)/$(TARGET).bin

#iap:
#	cd $(PROJECT_TOP_DIR)/../c5_task_mcu_motor_bootloader/hal/ && make iap -j32
#	touch Makefile
#	make images -j32 IAP=1
#	cd $(EXTENSIONS_DIR) && python3 no_compress_ota_packager_python.py
#	rm -rf $(BUILD_DIR)/${TARGET}_*
#	cp $(EXTENSIONS_DIR)/${TARGET}.elf $(BUILD_DIR)/ota_${TARGET}_${SOFTWARE_VERSION}.${CI_BUILD_NUM}_${CURRENT_BRANCH}_${COMMIT_ID}.elf

#download:
#	rm -rf flash.jlink
#	touch flash.jlink
#	echo "r" > flash.jlink
#	echo "loadfile $(BUILD_DIR)/ota_${TARGET}_${SOFTWARE_VERSION}.${CI_BUILD_NUM}_${CURRENT_BRANCH}_${COMMIT_ID}.bin" >> flash.jlink
#	echo "r" >> flash.jlink
#	echo "exit" >> flash.jlink
#	JLinkExe -device STM32F103RG  -si SWD -speed 4000 -CommanderScript ./flash.jlink

# *** EOF ***
